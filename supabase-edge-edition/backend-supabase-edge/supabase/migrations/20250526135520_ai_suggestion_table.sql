create table "public"."ai_suggestions" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "user_id" uuid not null,
    "product_id" bigint not null,
    "opinion" character varying not null,
    "reason" text not null
);


alter table "public"."ai_suggestions" enable row level security;

alter table "public"."reviews" enable row level security;

CREATE UNIQUE INDEX ai_suggestions_pkey ON public.ai_suggestions USING btree (id);

alter table "public"."ai_suggestions" add constraint "ai_suggestions_pkey" PRIMARY KEY using index "ai_suggestions_pkey";

alter table "public"."ai_suggestions" add constraint "ai_suggestions_product_id_fkey" FOREIGN KEY (product_id) REFERENCES products(id) ON DELETE CASCADE not valid;

alter table "public"."ai_suggestions" validate constraint "ai_suggestions_product_id_fkey";

alter table "public"."ai_suggestions" add constraint "ai_suggestions_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE not valid;

alter table "public"."ai_suggestions" validate constraint "ai_suggestions_user_id_fkey";

grant delete on table "public"."ai_suggestions" to "anon";

grant insert on table "public"."ai_suggestions" to "anon";

grant references on table "public"."ai_suggestions" to "anon";

grant select on table "public"."ai_suggestions" to "anon";

grant trigger on table "public"."ai_suggestions" to "anon";

grant truncate on table "public"."ai_suggestions" to "anon";

grant update on table "public"."ai_suggestions" to "anon";

grant delete on table "public"."ai_suggestions" to "authenticated";

grant insert on table "public"."ai_suggestions" to "authenticated";

grant references on table "public"."ai_suggestions" to "authenticated";

grant select on table "public"."ai_suggestions" to "authenticated";

grant trigger on table "public"."ai_suggestions" to "authenticated";

grant truncate on table "public"."ai_suggestions" to "authenticated";

grant update on table "public"."ai_suggestions" to "authenticated";

grant delete on table "public"."ai_suggestions" to "service_role";

grant insert on table "public"."ai_suggestions" to "service_role";

grant references on table "public"."ai_suggestions" to "service_role";

grant select on table "public"."ai_suggestions" to "service_role";

grant trigger on table "public"."ai_suggestions" to "service_role";

grant truncate on table "public"."ai_suggestions" to "service_role";

grant update on table "public"."ai_suggestions" to "service_role";

create policy "Enable delete for users based on user_id"
on "public"."ai_suggestions"
as permissive
for delete
to public
using ((( SELECT auth.uid() AS uid) = user_id));


create policy "Enable insert for users based on user_id"
on "public"."ai_suggestions"
as permissive
for insert
to public
with check ((( SELECT auth.uid() AS uid) = user_id));


create policy "Enable users to view their own data only"
on "public"."ai_suggestions"
as permissive
for select
to authenticated
using ((( SELECT auth.uid() AS uid) = user_id));


create policy "Enable delete for users based on user_id"
on "public"."reviews"
as permissive
for delete
to public
using ((( SELECT auth.uid() AS uid) = user_id));


create policy "Enable insert for users based on user_id"
on "public"."reviews"
as permissive
for insert
to public
with check ((( SELECT auth.uid() AS uid) = user_id));


create policy "Enable read access for all users"
on "public"."reviews"
as permissive
for select
to public
using (true);



